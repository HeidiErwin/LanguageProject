Things Heidi needs to do UI/UX/Unity-wise(6/25 - 6/27):
[DONE] refactor WordPiece into ExpressionPiece
[DONE] make a GameController class to set up the keyboard / add expressions to the screen
	   will definitely be useful if not necessary later anyways
[DONE] expressionPiece.CanAccept --> GET and KEY working fine, bug w/ F & X
[DONE] expressionPiece.DetermineUpdatedSprite
[DONE] expressionPiece.DeterminePreviewSprite
[DONE] delete Keyboard.cs if obsolete
[DONE] In expressionPiece.OnDrop: the dropped expression COPIES from the keyboard
[DONE] implement ExpressionPieceSpawner, which should remove the need for the next 2 things:
[DONE] copying from keyboard puts pieces at end of keyboard
[DONE] In expressionPiece.OnDrop: make sure you can only combine expressions in the workspace---keyboard should stay constant
[DONE] when pieces combine, whole new piece!
----------------------------------------------------------------------------------------------
TODO with Bill Thursday:
	1. edit ExpressionPiece constructor to create its own Expression -- is this what we want? i.e. in the future, making 
	   an Expression will be done through making an ExpressionPiece --> Nope! See responses below for how this is going to be handled.
~~~~~~~~~~~~~~~~
Bill's Remarks (6/27):
  - the symbols on the keyboard shouldn't move, as you've noted, and they also shouldn't change form when a potential argument is in play. They should be inert, and always in the same position on the keyboard. Ultimately there will be multiple tabs for the keyboard.
    What I imagine this means implementation-wise is that the symbols on the keyboard aren't the Word objects that are manipulated on the workspace: rather, they're template-objects, let's call them "WordSpawner"s, which instantiate whichever Word is associated with the WordSpawner whenever a user drags from it. So the DOOR symbol on the keyboard would be an object whose OnDrag method instantiates a container for a new Word("Door", ...)
      * WordSpawners don't move, change to input/output form, etc. because they aren't themselves ExpressionPiece objects. This would seem to solve a lot of the outstanding problems you're setting out to fix, and wouldn't involve complicated checks for whether an object is on the workspace or not: Spawners are always in the keyboard, and ExpressionPieces are always on the workspace.
      * A WordSpawner takes a SemanticType and String as input. When it's time for the WordSpawner to make a Word, it'll pass these as arguments.
      * The WordSpawner will store the Image that's the name of the word. We can have a naming convention for the sprites to be <ID>.png where <ID> is the ID string of the word, and so we find the right image by taking the inputted string and getting our file based off of it.
  - To answer the question in 1.: No, I don't think so. The ExpressionPiece should have its expression as a field, but it shouldn't be the one creating it. The idea is to store the Image in the Container so that we don't have to recreate the image from scratch every time we make a new expression, but also keep Expressions from being Unity Objects with graphical fields so that it's not bloated. I'll talk more about this when we meet.
  - We need to see if multi-argument function expressions work, as well as function expressions with a higher type than e->t, as well as e->e expressions, etc... If you want inspiration for common semantic types, check out my Testing file in the AI folder.
    * That means we need to resize expressions as necessary. If an expression has three arguments, it should be at least 4 units (where one symbol without arguments is 1unitx1unit) wide, maybe more if one the inputs was a compound expression itself. And it should be at least 2 units high.
    * this'll mean a larger workspace is necessary.
  - I'd like to see expressions color coded by semantic type and for us to start using images for our symbols instead of fonts, and maintain a regular square size for them. It can be simple shapes for now.
~~~~~~~~~~~~~~~
Heidi's Response (6/27):
	- I can make an ExpressionPieceSpawner class that does what you wanted w/ WordSpawners
		* Now that I'm working on this and testing, it seems like it will be easier for the user to just click the symbols for them to spawn in the workspace, so I'm going to implement that.
		  We can change that later if we need to.
	- So rather than having the GameController create ExpressionPieces and pass in the info so that the ExpressionPiece can create its Expression field, you're suggesting we 
	  have the GameController not only create ExpressionPieces, but also create Expressions and then just pass the entire Expressions into the constructor of the ExpressionPiece. 
	  I can make that change.
	- Will ALL expressions be square? i.e. will a three-argument expression not be a wider rectangle, which accepts squares? I suppose it would be convenient to have 
	  every expression be square because argument boxes could then always be square without confusion
~~~~~~~~~~~~~~~
TODO After 6/27 (6/28 - 6/30):
[DONE] figure out if it's better to:
		* change prefabs from specific prefabs to general Piece & PieceSpawner prefabs, and then later set specifications OR --> this!
		* copy prefabs as we need more symbols, that can then be called by name
[DONE] remove bug from Draggable where placeholder remains and makes workspace appear shifted
[DONE] update ExpressionPiece image only when necessary
[DONE] PieceSpawner Image resolve bug
[DONE] GenerateNewImage --> now GenerateVisual()
	- [DONE] self-build using a color based on SemanticType
	- [DONE] get symbol from image
	- [DONE] box size depends on num args
	- [DONE] box height depends on max height of args
	- [DONE] argument positioning
[DONE] change names, which are currently Strings, to symbols, which are Images. Alternatively, keep names, but add in symbols. --> symbols accesssed based on name
[DONE] buffer space
~~~~~~~~~~~~~~~~~~~~~~~
COLORS:
	- outline gives current semtype
	- fill gives semtype that expr will become when all args filled in (output type)
	- empty input boxes have colored outline for type they accept, fill is semi transparent (look into alpha layers)
~~~~~~~~~~~~~~~~~~~~~~~
7/10 and after TODO: 
- [DONE] borders (for input and main box)
- [DONE] GenerateVisual needs to be a function of 
- [DONE] sem type colors ++
- [DONE] empty arg boxes
- [DONE] larger workspace
- preview resizing input boxes depending on what's being dragged: Maybe don't do this?? Maybe change to click-click instead
- put exprs in specific input box rather than first slot / argument indeces
- box doesn't shift in place if something is dragged over it, so player can place in specific input box
- keyboard should be ordered
- expressions shouldn't stack transparency
- preview sprites
- remove DeterminePreviewSprite & DetermineUpdatedSprite -- ensure their functionalities are covered (this is related to preview images)
- order doesn't change when new piece in workspace
- if we implement an Expression Bank ever (user-saved expressions), we need to edit ExpressionPiece.SetExpression()
   to not make myArguments just an empty array
- clean up comments & Debugs

On 7/10-7/11, I added border colors, expanded the keyboard and got argument boxes (almost) working, except for a bug where a completely invisible "dummy" expression piece (which I make to make the empty argument slot) is left on the workspace.
If you work on the project before I do, could you please work on the bug?

Also, as a cosmetic thing, I would really like to have the transparency the same over all the expression, but since we have multiple
semi-transparent rectangles stack ontop of one another, the expressions become more opaque the deeper they are in an expression.
Could you try to fix this if you could?

And could we make the workspace bigger, and possibly move away from drag-drop to click-click?

Thanks,
Bill

7/11: Fixed the bug and made the workspace bigger. I want to know specifically what you're thinking in terms of click-click before I 
	  start on that so that I don't spend time creating something we don't really want. Would click-click 
	  mean you select a click a piece, e.g. Alice, and now that Alice has been selected, you would click 'runs' for Alice to be placed into runs? and if you clicked
	  Alice by accident on the workspace you would be able to re-click Alice to deselect it?

    BILL'S ANSWER: you'd click on the argument slot for 'run', not anywhere on 'run'. That way you can select specific argument slots when there are multiple.
    Yes, you can deselect by selecting the expression itself, or maybe there are dedicated buttons on the side of the workspace for stuff like deleting, using, selecting, deselecting...
	  
	 I'm not totally sure how we could deal with the transparency thing, and hopefully there is an easier way than, in the case of runs(Alice), calculating
	 the square of pixels that Alice occupies and setting that section of runs to be entirely transparent so that Alice's tint is the only one showing, but this
	 may be how we have to go about it. If we end up having to attempt that, we will probably use similar code for determining which argument box the user is trying
	 to drag an argument into, which is also on the TODO list, so that will be a two-birds-one-stone (1.5-birds-one-stone?) situation.
	 I will look into transparency in Unity online, but it would be great if you could look into this as well.

- Heidi 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO FOR DEMO:
- [DONE] fix ExpressionPiece placement problems
	- [DONE] clean up code
	- [DONE] fix Initialize()
	- [DONE] fix CombineWith()
- keyboard 
	- [DONE] tab buttons working
		- [DONE] expressions belong to specific parts of keyboard
	- [DONE] piecespawners added to keyboard
	- [DONE] expressions when clicked add to workspace
	- button on workspace (check mark type thing) that makes current made expression remain while keyboard & workspace disappear
	- [DONE] key to open/close keyboard+workspace
- ability to say something to an NPC by clicking the NPC
- if say something to NPC, yes, no, idk, confused responses
- fill NPC models
- build world w/ current objects & decided words

~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO, as of 9/14:
Graphics:
	- [DONE] prefab for argument slots still exists (helpful for debugging but should be made invisible for actual use) NOTE: to turn this back on, just turn the opacity on the piece prefab back on
		* [DONE] drawing argument interior even when "DRAW_SUBEXPRESSION_TYPE" is set to false
	- [DONE] argument alignment issues for a 2 argument expression with first argument filled in
	- dynamic resize for expressions
	- rescale for keyboard pieces
	- [DONE] Semantic type not "T" when it should be for large expressions
Reasoning system:
	- make evaluation/substitution more efficient. BFS instead of DFS, keep track of proof path, etc.
	- [DONE] handle quantified pattern matching: F(x) |- G(y)
	- [DONE] substitution rules with preconditions
	- type-check patterns
	- handling pattern matching for partially applied expressions (make variable have a parameter which specifies whether it should except "_" or not?)
	(alternatively: make expression pattern more complicated, and "curry" the pattern matching?)
	- type-check inference rules to be type t
	- [DONE] handle parameter insertion
Perception system:
	- [DONE] environment -> model links (how should this work?)
	- [DONE] objects trigger when an NPC (N) are within range, call EnvironmentManager.ComputePerceptualReport(N)
	- [DONE] For now, fountain color and lighting with 8 basic colors + color addition
	- [DONE] also door, areas, fountains, lamps, NPCs
Action system:
	- figure out format for action rules, as well as primitive action representations
	- code procedure determining composite action from primitive ones

~~~~~~~~~~~~~~~~~~~~~~~~~~~
TODO, 9/20:
Graphics:
  - resize for keyboard and expressions
  - keyboard multiple pages
	- animations
Reasoning:
  - identity relation
  - model should auto-fill in parameters
	- [DONE] still need to type-check patterns
	- still need to deal with pattern matching for partially applied expressions
	- revamp rules to be inference/substitution rules and evaluation rules ONLY (no inference rules)
	- change type of quantifier/make sub-types a thing so that there's a difference between individuals and quantifiers
	- find a way to make proof-search BFS instead of DFS to speed it up
	- store proof path to avoid cycles & save in model
	- far off: save continuation to make reasoning happen in game time and not just in one frame
Perception:
	- make it so that trigger collider is perception-specific and doesn't interfere with making expressions
	- maybe actually simulate stuff and send analog information
Action:
  - figure out format for action rules, as well as primitive action representations
	- code procedure determining composite action from primitive ones
